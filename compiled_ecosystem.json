{
  "gladis": {
    "crates_io": "https://crates.io/crates/gladis",
    "repo": "https://github.com/MicroJoe/gladis",
    "description": "Easily import Glade-generated UI files into Rust code.",
    "docs": "https://docs.rs/gladis",
    "tags": [
      "GTK"
    ]
  },
  "Iced": {
    "crates_io": "https://crates.io/crates/Iced",
    "repo": "https://github.com/hecrj/iced",
    "description": "A renderer-agnostic GUI library for Rust focused on simplicity and type-safety. Inspired by Elm.",
    "docs": "https://docs.rs/iced",
    "tags": []
  },
  "Azul": {
    "crates_io": "https://crates.io/crates/Azul",
    "repo": "https://github.com/fschutt/azul",
    "description": "    Azul GUI is a free, functional, reactive GUI framework\n    for rapid development of desktop applications written in Rust and C,\n    using the Mozilla WebRender rendering engine.\n",
    "docs": null,
    "tags": [
      "WebRender"
    ]
  },
  "Relm4": {
    "crates_io": "https://crates.io/crates/Relm4",
    "repo": "https://github.com/AaronErhardt/relm4",
    "description": "An idiomatic GUI library inspired by Elm and based on gtk4-rs",
    "docs": "https://aaronerhardt.github.io/docs/relm4/relm4/",
    "tags": [
      "GTK",
      "Bindings",
      "MacOS",
      "CSS"
    ]
  },
  "druid": {
    "crates_io": "https://crates.io/crates/druid",
    "repo": "https://github.com/linebender/druid",
    "description": "Druid is an experimental Rust-native UI toolkit. Its main goal is to offer a polished user experience. There are many factors to this goal, including performance, a rich palette of interactions (hence a widget library to support them), and playing well with the native platform.",
    "docs": null,
    "tags": [
      "piet"
    ]
  },
  "GTK": {
    "crates_io": "https://crates.io/crates/GTK",
    "repo": "https://github.com/gtk-rs/gtk3-rs",
    "description": "Rust bindings and wrappers for GLib, GDK 3, GTK+ 3 and Cairo.",
    "docs": "https://gtk-rs.org/docs-src/",
    "tags": [
      "Bindings",
      "GTK"
    ]
  },
  "conrod-core": {
    "crates_io": "https://crates.io/crates/conrod-core",
    "repo": "https://github.com/pistondevelopers/conrod.git",
    "description": "An easy-to-use, 100% Rust, extensible 2D GUI library.",
    "docs": null,
    "tags": [
      "Immediate mode API"
    ]
  },
  "qt_widgets": {
    "crates_io": "https://crates.io/crates/qt_widgets",
    "repo": "https://github.com/rust-qt/ritual",
    "description": "Ritual Qt bindings",
    "docs": "https://rust-qt.github.io/qt/",
    "tags": [
      "Bindings",
      "Qt"
    ]
  },
  "WebRender": {
    "crates_io": "https://crates.io/crates/WebRender",
    "repo": "https://github.com/servo/webrender",
    "description": "A GPU accelerated 2D renderer for web content",
    "docs": "https://doc.servo.org/webrender/index.html",
    "tags": [
      "WebRender"
    ]
  },
  "qmetaobject-rs": {
    "crates_io": null,
    "repo": null,
    "description": "A framework empowering everyone to create Qt/QML applications with Rust. It does so by building QMetaObjects at compile time, registering QML types (optionally via exposing QQmlExtensionPlugins) and providing idiomatic wrappers.",
    "docs": "https://docs.rs/qmetaobject/",
    "tags": [
      "proc-macro",
      "Bindings",
      "Qt",
      "QML"
    ]
  },
  "WinSafe": {
    "crates_io": "https://crates.io/crates/WinSafe",
    "repo": "https://github.com/rodrigocfd/winsafe",
    "description": "Win32 GUI and related APIs in safe, idiomatic Rust.",
    "docs": "https://docs.rs/winsafe",
    "tags": [
      "Bindings",
      "WinApi"
    ]
  },
  "core-foundation": {
    "crates_io": "https://crates.io/crates/core-foundation",
    "repo": "https://github.com/servo/core-foundation-rs",
    "description": "Bindings to Core Foundation for macOS",
    "docs": "https://docs.rs/core-foundation/",
    "tags": [
      "Bindings",
      "MacOS"
    ]
  },
  "iui": {
    "crates_io": "https://crates.io/crates/iui",
    "repo": "https://github.com/LeoTindall/libui-rs",
    "description": "Simple, small, easy to distribute GUI bindings.",
    "docs": "https://docs.rs/iui/",
    "tags": [
      "Bindings"
    ]
  },
  "OrbTk": {
    "crates_io": "https://crates.io/crates/OrbTk",
    "repo": "https://github.com/redox-os/orbtk",
    "description": "The Orbital Widget Toolkit is a multi platform (G)UI toolkit for building scalable user interfaces with the programming language Rust. It's based on the Entity Component System Pattern and provides a functional-reactive API.",
    "docs": "https://docs.rs/orbtk",
    "tags": []
  },
  "lvgl": {
    "crates_io": "https://crates.io/crates/lvgl",
    "repo": "https://github.com/rafaelcaricio/lvgl-rs",
    "description": "LittlevGL bindings for Rust. A powerful and easy-to-use embedded GUI with many widgets, advanced visual effects (opacity, antialiasing, animations) and low memory requirements (16K RAM, 64K Flash).",
    "docs": "https://github.com/rafaelcaricio/lvgl-rs",
    "tags": [
      "Bindings",
      "Embedded"
    ]
  },
  "rust-qt-binding-generator": {
    "crates_io": "https://crates.io/crates/rust-qt-binding-generator",
    "repo": "https://anongit.kde.org/rust-qt-binding-generator",
    "description": "Generate code to build Qt applications with Rust",
    "docs": "https://phabricator.kde.org/source/rust-qt-binding-generator/",
    "tags": [
      "Bindings",
      "Qt",
      "QML"
    ]
  },
  "vgtk": {
    "crates_io": "https://crates.io/crates/vgtk",
    "repo": "https://github.com/bodil/vgtk",
    "description": "A declarative UI framework for GTK",
    "docs": "https://docs.rs/vgtk",
    "tags": [
      "GTK"
    ]
  },
  "tauri": {
    "crates_io": null,
    "repo": "https://github.com/tauri-apps/tauri",
    "description": "Tauri is a framework for building tiny, blazing fast binaries for all major desktop platforms.",
    "docs": "https://tauri.studio/en/",
    "tags": [
      "HTML",
      "MacOS",
      "GTK"
    ]
  },
  "KAS": {
    "crates_io": "https://crates.io/crates/KAS",
    "repo": "https://github.com/kas-gui/kas",
    "description": "The toolKit Abstraction System leverages generics and macros to compose widgets with encapsulated user data, provides a powerful event-handling model and scales to at least 100'000 widgets per window.",
    "docs": "https://docs.rs/kas",
    "tags": [
      "winit",
      "WebGPU",
      "proc-macro"
    ]
  },
  "imgui": {
    "crates_io": "https://crates.io/crates/imgui",
    "repo": "https://github.com/imgui-rs/imgui-rs",
    "description": "High-level Rust bindings to dear imgui",
    "docs": null,
    "tags": [
      "Bindings",
      "Immediate mode API"
    ]
  },
  "Makepad": {
    "crates_io": "https://crates.io/crates/Makepad",
    "repo": "https://github.com/makepad/makepad",
    "description": "Makepad is a new VR, web and native-rendering UI framework.",
    "docs": null,
    "tags": [
      "WebGPU"
    ]
  },
  "fltk": {
    "crates_io": "https://crates.io/crates/fltk",
    "repo": "https://github.com/fltk-rs/fltk-rs",
    "description": "The FLTK crate is a crossplatform lightweight gui library which can be linked to statically to produce small, self-contained and fast binaries",
    "docs": "https://docs.rs/fltk",
    "tags": [
      "Bindings",
      "FLTK"
    ]
  },
  "flutter_rust_bridge": {
    "crates_io": "https://crates.io/crates/flutter_rust_bridge",
    "repo": "https://github.com/fzyzcjy/flutter_rust_bridge",
    "description": "High-level memory-safe binding generator for Flutter/Dart <-> Rust",
    "docs": "https://github.com/fzyzcjy/flutter_rust_bridge",
    "tags": [
      "Bindings"
    ]
  },
  "native-windows-gui": {
    "crates_io": "https://crates.io/crates/native-windows-gui",
    "repo": "https://github.com/gabdube/native-windows-gui",
    "description": "A rust library to develop native GUI applications on the desktop for Microsoft Windows. Native-windows-gui wraps the native win32 window controls in a rustic API",
    "docs": "https://gabdube.github.io/native-windows-gui/native-windows-docs/index.html",
    "tags": [
      "Bindings",
      "proc-macro",
      "WinApi"
    ]
  },
  "cacao": {
    "crates_io": "https://crates.io/crates/cacao",
    "repo": "https://github.com/ryanmcgrath/cacao",
    "description": "Rust bindings for AppKit (macOS, beta) and UIKit (iOS/tvOS, alpha).",
    "docs": "https://docs.rs/cacao/",
    "tags": [
      "MacOS",
      "iOS"
    ]
  },
  "sciter-rs": {
    "crates_io": "https://crates.io/crates/sciter-rs",
    "repo": "https://github.com/sciter-sdk/rust-sciter",
    "description": "Rust bindings for Sciter - Embeddable HTML/CSS/script engine (cross-platform desktop GUI toolkit). Also capable with DirectX / OpenGL.",
    "docs": "https://docs.rs/sciter-rs",
    "tags": [
      "HTML",
      "CSS"
    ]
  },
  "relm": {
    "crates_io": "https://crates.io/crates/relm",
    "repo": "https://github.com/antoyo/relm",
    "description": "Asynchronous, GTK+-based, GUI library, inspired by Elm, written in Rust",
    "docs": "https://docs.rs/relm/",
    "tags": [
      "Bindings",
      "GTK"
    ]
  },
  "fui-core": {
    "crates_io": "https://crates.io/crates/fui-core",
    "repo": "https://github.com/marek-g/rust-fui",
    "description": "MVVM-oriented (properties, observable collections, bindings), ui! macro, multiplatform, renderer-agnostic, with styles.",
    "docs": "https://github.com/marek-g/rust-fui/blob/master/doc/SUMMARY.md",
    "tags": [
      "winit",
      "proc-macro"
    ]
  },
  "SixtyFPS": {
    "crates_io": null,
    "repo": "https://github.com/sixtyfpsui/sixtyfps",
    "description": "SixtyFPS is a toolkit to efficiently develop fluid graphical user interfaces for any display: embedded devices and desktop applications. It comes with a fast OpenGL renderer, a designer-friendly markup language and is written in Rust.",
    "docs": "https://docs.rs/sixtyfps/",
    "tags": [
      "proc-macro",
      "winit",
      "Embedded",
      "CSS",
      "MacOS"
    ]
  },
  "egui": {
    "crates_io": "https://crates.io/crates/egui",
    "repo": "https://github.com/emilk/egui",
    "description": "Highly portable immediate mode GUI library in pure Rust",
    "docs": "https://docs.rs/egui",
    "tags": [
      "Immediate mode API"
    ]
  }
}